@{
    ViewData["Title"] = "Context";
}

<div>
    <h1 class="display-4">Контекст даних</h1>
</div>
<p>
    При роботі з веб-застосунками питання БД у більшості випадків вирішується віддаленим хостингом - БД окремо від бекенду сайту.
    Рекомендована в ASP технологія - Entity Framework Core.
</p>
<p>
    Для встановлення засобів EF Core підключаємо пакети NuGet
    <ul>
        <li>Microsoft.EntityFrameworkCore</li>
        <li>Microsoft.EntityFrameworkCore.Tools - Інструменти PM консолі</li>
        <li>
            <ul> Залежно від типу БД
                <li>Microsoft.EntityFrameworkCore.SqlServer (MS SQL Server)</li>
                <li>Pomelo.EntityFrameworkCore.MySql (Oracle MySQL)</li>
            </ul>
        </li>
        <li>
            dotnet tool install --global dotnet-ef <br />
            Аналог косолі PM, тільки для командного рядка
        </li>
    </ul>
</p>
<p>
    Описуємо класи-сутності та клас-контекст. 
    - cтворюємо папку Data
    - у ній - Entity
    - у ній - клас User, у Data - DataContext
</p>
<p>
    Оскільки ASP проєкт керується інвертором управління, конструювання об'єктів має бути перенесено на нього. Відповідно, конструктори контексту слід делегувати батьківському класу <br />
    <code>
        public DataContext(DbContextOptions options) : base(options)
        {

        } <br />
    </code>
</p>
<p>
    Рядок (рядки) підключення прийнято встановлювати у файлі "appsettings.json".
    У цей файл слід додати секцію <br />
    <code>
    "ConnectionStrings": { <br />
        "MsDb": "Data Source=(LocalDB)\\MSSQLLocalDB;Initial Catalog=ef201asp;Integrated Security=True", <br />
        "MySqlDb": "Server=aws.connect.psdb.cloud;Database=main_db;user=bv25p2rbbkttsw2jrxgo;password=pscale_pw_4VWmyaKuR5P17Bye2BfU1c4myt7ZbXjJDJvJYu6t6Gj;SslMode=VerifyFull;" <br />
    }<br />
    </code>
    Рядків підключення може бути декілька
</p>
<p>
    Далі переходимо у Program.cs і реєструємо контекст даних.
    Варіанти див. у файлі.
</p>
<p>
    Створюємо і застосовуємо міграції. Варіанти з PM консоллю було розглянуто при вивченні ADO, тут наведемо приклади з терміналом. <br />
    Tools - Command Line - PowerShell <br />
    Переконуємось, що всі файли збережені та ребілдимо проєкт, бо інструменти командрного рядку не виводять детальні помилки.
    <code>
        dotnet tool install --global dotnet-ef  <br />
        dotnet ef migrations add Initial        <br />
        dotnet ef database update               <br />
    </code>
</p>
<p>
    Використання контексту - за правилами інжекції служб.<br />
    Користувачів у БД: @ViewData["UserCount"]
</p>