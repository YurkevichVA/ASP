@{
    ViewData["Title"] = "Scheme";
}

<div class="text-center">
    <h1 class="display-4">Схема взаємодії</h1>
</div>

<p>
    У взаємодії беруть участь декілька "гравців":
    <ul>
        <li>клієнт - бравзер або інший споживач інформації</li>
        <li>сервер - бекенд, який оброблює запит клієнта та повертає дані (html / json / file/ ... )</li>
    </ul>
</p>
<p>
    Проходження запиту: 
    <ul>
        <li>
            У бравзері натискається посилання або вводиться URL в адресний рядок.
            Це призводить до того, що бравзер формує звернення (запит) до зазначеного URL.
        </li>
        <li>
            Бравзер визначає IP (локацію) сервера за заданим URL (localhost) і передає до нього сформований HTTP-запит
        </li>
        <li>
            Бекенд складається з двох шарів: веб-сервер та веб-застосунок (Application).
            Веб-сервер це програма, яка слухає порт, приймає HTTP-запити, розділяє їх параметри, формує об'єкти .NET та передає їх до застосунку.
            За замовченням для ASP встановлюється IIS від Microsoft.
            Застосунок - це скомпільований код (DLL), зроблений з проєкту.
            Процес побудови DLL та передачі їх до IIS називається Deploy.
            Це пояснює чому зміни у коді не відразу відображаються у поведінці сайту - їх спочатку треба перезібрати у DLL та, можливо, перенести у папки серверу (ISS) - Redeploy.
        </li>
        <li>
            Пройшовши веб-сервер запить потрапляє у застосунок і проходить оброблення. 
            Для кожного запиту сервер створює новий об'єкт (екземпляр) контроллера.
            Це робиться з міркувань безпеки - якщо перший екземпляр було створено для авторизованого користувача, то наступний запит від неавторизованого може звернутись до речей, які не мають бути доступними для нього.
            У той же час, інші  об'єкти не перестворюються і існують протягом всієї роботи застосунку. 
            Це складає основу Scope - часових рамок існування об'єктів:
            Singleton - постійне існування, RequestScope - протягом одного запиту, Transient - протягом одного звернення до програмного об'єкту.
        </li>
        <li>
            Після оброблення у котроллерах робота передається на представлення (View).
            Формат .cshtml дозволяє впроваджувати коди C# у HTML з використанням спеціалізованого синтаксису - Razor.
            Для передачі даних з контролеру до представлення існує спеціальні об'єкти ViewBag (старий) та ViewData.
            ViewBag - dymanic, що може змінювати склад полів під час виконання, 
            ViewData - Dictionary, що створює нові дані через індексатор []
            <br/>
            Дані від ViewBag: <b>@ViewBag.bagdata</b>
            <br/>
            Дані від ViewData: <b>@ViewData["data"]</b>
        </li>
        <li>
            Після того як представлення відпрацювало, утворений HTML передається до IIS, він "упаковує" HTML у HTTP-відповідь (response) і передає її до клієнта (бравзера).
        </li>
    </ul>
</p>