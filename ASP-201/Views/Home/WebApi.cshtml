@{
    ViewData["Title"] = "Web API";
}

<div>
    <h1 class="display-4">Web API</h1>
</div>

<p>
    API - Application Program Interface - інтерфейс взаємодії програми та додатку. <br />
    Програма (у даному контексті) - певний інформаційни "центр", який керує даними - зберігає та поширює між додатками. <br />
    Додаток (Application) - застосунок, який для своєї роботи використовує дані надані програмою. <br />
    Інтерфейс - спосіб взаємодії - набір правил інформаційного обміну. <br />
</p>
<p>
    Приставка "Web" свідчить про використання мережевого HTTP протоколу.
    Такі API базуються можливостях HTTP з передачі даних: 
</p>
<ul>
    <li>Метод запиту - літерал (слово) з якого починається запит. 
        Існують стандартні методи (GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD, TRACE),
        розширені методи - "промислові" стандарти (LINK, UNLINK, CONNECT, PURGE, ...),
        нестандартні методи - які існують у межах лише даного ПЗ (HELO, QUIT, PASS, ...)
        
        </li>
    <li><a asp-action="Url">URL</a> - може містити path та query, які можно міняти, вказуючи параметри.</li>
    <li>Заголовки (headers) - дані у формі "ключ: значення; параметри" для зазначення деталей запиту
        (тип контенту, довжина контенту, кодування символів, архівування (якщо є), Cookie, токени тощо.</li>
    <li>Тіло (body) - решта запиту (після заголовків), яка містить довільні дані - як текстовоого, так і бінарного походження.</li>
</ul>
<p>
    АРІ, як правило, призначене для "машино-машинної" взаємодії. Дані, що передаються,
    базуються не на людино-зрозумілих сутностях, а на машинних кодах, статусах, токенах,
    тощо. На відміну від MVC, призначеного для людини, у АРІ повідомлення про результати
    нормально передавати цифровими кодами. У веб-АРІ вживаються НТТР статус-коди.
</p>
<p>
    Реалізація АРІ у ASP. <br />
    Для АРІ вживається окремий вид контроллерів - АpiController (ControllerBase) <br />
    Головні відмінності API контроллерів полягають у наступному:
</p>
<ul>
    <li>Вони не мають представлення, дані від них передаються у форму JSON.</li>
    <li>Вони мають постійну адресу, а різні методи класу викликаються в залежності від методу запиту.<br />
        MVC: GET /ctr/page1,  GET /ctr/page2 <br />
        API: GET /ctr, POST /ctr, PUT/ctr
    </li>
    <li>Тип повернення методів як правило відповідає типам даних (об'єктів), для узагальнення вживається <code>object</code></li>
    <li>
        Redirect не є необхідним для POST запитів (як у MVC), тут всі методи фактично рівнозначні
    </li>
    <li>
        Випробування - якщо MVC контроллери випробоувють бравзером, то API контроллери - фбо фронтендом, або спецпрограмами на кшталт Postman
    </li>
</ul>
<div class="card col-6">
    <div class="card-body">
        <div class="row">
            <div class="col col-6">
                <button class="btn btn-primary" id="get-button" data-send="GetData">GET</button>
                <button class="btn btn-secondary" id="post-button" data-send="PostData">POST</button> 
                <button class="btn btn-warning" id="link-button">LINK</button> 
                <button class="btn btn-outline-dark" id="patch-button">PATCH</button> 
                <button class="btn btn-dark" id="unlink-button">UNLINK</button> 
            </div>
            <div class="col col-6">
                <p id="request-result"></p>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {

        const getButton = document.getElementById("get-button");
        if (getButton) getButton.addEventListener('click', getButtonClick);
        else console.error("'get-button' not found");

        const postButton = document.getElementById("post-button");
        if (postButton) postButton.addEventListener('click', postButtonClick);
        else console.error("'post-button' not found");

        const linkButton = document.getElementById("link-button");
        if (linkButton) linkButton.addEventListener('click', linkButtonClick);
        else console.error("'link-button' not found");

        const patchButton = document.getElementById("patch-button");
        if (patchButton) patchButton.addEventListener('click', patchButtonClick);
        else console.error("'patch-button' not found");

        const unlinkButton = document.getElementById("unlink-button");
        if (unlinkButton) unlinkButton.addEventListener('click', unlinkButtonClick);
        else console.error("'unlink-button' not found");
    });
    function getButtonClick(e) {
        const data = e.target.getAttribute("data-send");
        window.fetch("/api/rates?data=" + data)
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }
    function postButtonClick(e) {
        const data = e.target.getAttribute("data-send");
        window.fetch("/api/rates", {
            method: "POST", 
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({'data': data})
        })
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }
    function linkButtonClick() {
        //const data = e.target.getAttribute("data-send");
        window.fetch("/api/rates", {
            method: "LINK"
        })
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }
    function patchButtonClick() {
        window.fetch("/api/rates", {
            method: "PATCH"
        })
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }
    function unlinkButtonClick() {
        window.fetch("/api/rates", {
            method: "UNLINK"
        })
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }

</script>