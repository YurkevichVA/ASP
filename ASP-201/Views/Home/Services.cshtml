@using ASP_201.Services
@inject DateService dateService
@inject TimeService timeService
@inject StampService stampService
@{
    ViewData["Title"] = "Services";
}

<div>
    <h1 class="display-4">Сервіси ASP</h1>
</div>

<p>
    Сервіси (служби, постачальники) - узагальнена назва класів(об'єктів), що є залежностями (dependencies) для інших класів (об'єктів).
    Як правило, мова іде про загальновживані класи, залежність від яких спостерігається у багатьох інших класах.
</p>
<p>
    Робота із сервісами складається з кількох етапів:
    <br />
    - Оголошення сервісу
    <br />
    - Реєстрація сервісу
    <br />
    - Впровадження (інжекція) сервісу
    <br />
    Для керування процесами утворення (інстанціації) об'єктів та передачі посилання на них (інжекції) у програмі має бути спеціальний модуль -
    модуль інверсії управління. (управління чим? - створенням і знищенням об'єктів)
</p>
<p>
    Через поширеність таких підходів, самі сервіси відокремлюються у папку (Services). Для прикладу створимо декілька сервісів з відомостей про час.
    <br />
    - Створюємо папку Services у корені проєкту
    <br />
    - Створюємо клас <code>DateService</code>
    <br />
    - Реєструємо службу:
    <br />
    &emsp; = У Program.cs (або у старих проєктах Startup.cs) знаходимо секцію з <code>builder.Services</code>
    <br />
    &emsp; = Додаємо реєстрацію служб:
    <br />
    <code>
        builder.Services.AddTransient&lt;DateService>();  <br />
        builder.Services.AddScoped&lt;TimeService>();     <br />
        builder.Services.AddSingleton&lt;StampService>(); <br />
    </code>
    <br />
    &emsp; = Впровадження рекумендується робити через конструктори:
    <br />
    &emsp; &emsp; у класі оголошується readonly поле 
        <code>private readonly DateService _dateService;</code>
    &emsp; &emsp; у конструкторі класа додається параметр
        <code>HomeController(...DateService dateService)</code>
    &emsp; &emsp; який ініціалізує поле 
        <code>_dateService = dateService;</code>
</p>
<p>
    Інший спосіб інжекції - через поля (властивості).
    Такий спосіб, зокрема, вживається у представленнях за допомогою інструкцій, на зразок
        <code>
            &commat;inject DateService dateService
        </code>
</p>
<p>
    date_service(controller):   @ViewData["date_service"]    <br />
    date_service(view):         @dateService.GetMoment()     <br />
    <hr />
    time_service(controller):   @ViewData["time_service"]    <br />
    time_service(view):         @timeService.GetMoment()     <br />
    <hr />
    stamp_service(controller):  @ViewData["stamp_service"]   <br />
    stamp_service(view):        @stampService.GetMoment()    <br />
    <hr />
    <i>Різні хеш-коди свідчать про те що це різні об'єкті: <b>Transient</b></i> <br />
    date_hashcode(controller):  @ViewData["date_hashcode"]   <br />
    date_hashcode(view):        @dateService.GetHashCode()   <br />
    <hr />
    <i>Однакові хеш-коди свідчать про те, що це той самий об'єкт, коди міняються з оновленням сторінки: <b>Scoped</b></i><br />
    time_hashcode(controller):  @ViewData["time_hashcode"]   <br />
    time_hashcode(view):        @timeService.GetHashCode()   <br />
    <hr />
    <i>Однакові хеш-коди свідчать про те що це той самий об'єкт, коди міняються тільки с перезапуском сервера: <b>Singleton</b></i><br />
    stamp_hashcode(controller): @ViewData["stamp_hashcode"]  <br />
    stamp_hashcode(view):       @stampService.GetHashCode()  <br />
</p>
<hr />
<p>
    Інверсія залежностей (DIP, літера D у SOLID) - відмова від впровадження залежностей від класів, а перехід на залежності від інтерфейсів.
    <code>builder.Services.AddSingleton&lt;IHashService, Md5HashService>();</code>
</p>
<p>
    MD5("123") = @ViewData["hash_service"];
</p>